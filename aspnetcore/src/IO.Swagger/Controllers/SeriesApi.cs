/*
 * Data Buffet API
 *
 * API access to Moody's Analytics repository of international and subnational economic and demographic time series data.  To acquire your client_id and client_secret, visit [https://www.economy.com/myeconomy/api-key-info](https://www.economy.com/myeconomy/api-key-info).  If you are not registered, you can register for a free account to retrieve your keys  For more info, see the [documentation](https://github.com/moodysanalytics/databuffet.api.codesamples/blob/master/dataBuffet-api-userguide.md#retrieve-a-single-series) 
 *
 * OpenAPI spec version: v1
 * Contact: maa@moodys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SeriesApiController : ControllerBase
    { 
        /// <summary>
        /// Returns series data formatted in JSON.
        /// </summary>
        /// <remarks>For more info, see https://github.com/moodysanalytics/databuffet.api.codesamples/blob/master/dataBuffet-api-userguide.md#retrieve-a-single-series</remarks>
        /// <param name="m">The data series code (mnemonic) that is being requested.</param>
        /// <param name="freq">Converts the data series to another frequency.</param>
        /// <param name="trans">Performs a mathematical transformation on the data.</param>
        /// <param name="conv">Conversion technique to use when performing frequency conversion.</param>
        /// <param name="startDate">Start of data series. YYYY-MM-DD format.</param>
        /// <param name="endDate">End of data series. YYYY-MM-DD format.</param>
        /// <response code="200">OK</response>
        /// <response code="401">Unauthorized</response>
        [HttpGet]
        [Route("/databuffet/api/v1/series")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("SeriesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(DataSeriesResult), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(Error), description: "Unauthorized")]
        public virtual IActionResult SeriesGet([FromQuery][Required()]string m, [FromQuery]int? freq, [FromQuery]int? trans, [FromQuery]int? conv, [FromQuery]string startDate, [FromQuery]string endDate)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DataSeriesResult));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"data\" : [ 5.962133916683182, 5.962133916683182 ],\n    \"freqCode\" : 0,\n    \"freq\" : \"freq\",\n    \"start\" : 6,\n    \"periods\" : 1,\n    \"startDate\" : \"startDate\"\n  },\n  \"endDate\" : \"endDate\",\n  \"concept\" : \"concept\",\n  \"fipCode\" : \"fipCode\",\n  \"geoCode\" : \"geoCode\",\n  \"description\" : \"description\",\n  \"source\" : \"source\",\n  \"error\" : \"error\",\n  \"geoTitle\" : \"geoTitle\",\n  \"dateExecuted\" : \"dateExecuted\",\n  \"databank\" : \"databank\",\n  \"dateUpdated\" : \"dateUpdated\",\n  \"lastHistory\" : \"lastHistory\",\n  \"dateCreated\" : \"dateCreated\",\n  \"freqCode\" : \"freqCode\",\n  \"mnemonic\" : \"mnemonic\",\n  \"observedAttribute\" : \"observedAttribute\",\n  \"startDate\" : \"startDate\",\n  \"status\" : \"status\"\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<DataSeriesResult>(exampleJson)
                        : default(DataSeriesResult);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
