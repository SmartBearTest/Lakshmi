/*
 * Data Buffet API
 *
 * API access to Moody's Analytics repository of international and subnational economic and demographic time series data.  To acquire your client_id and client_secret, visit [https://www.economy.com/myeconomy/api-key-info](https://www.economy.com/myeconomy/api-key-info).  If you are not registered, you can register for a free account to retrieve your keys  For more info, see the [documentation](https://github.com/moodysanalytics/databuffet.api.codesamples/blob/master/dataBuffet-api-userguide.md#retrieve-a-single-series) 
 *
 * OpenAPI spec version: v1
 * Contact: maa@moodys.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DataSeriesResult : IEquatable<DataSeriesResult>
    { 
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data")]
        public DataSeries Data { get; set; }

        /// <summary>
        /// Gets or Sets Mnemonic
        /// </summary>
        [DataMember(Name="mnemonic")]
        public string Mnemonic { get; set; }

        /// <summary>
        /// Gets or Sets Concept
        /// </summary>
        [DataMember(Name="concept")]
        public string Concept { get; set; }

        /// <summary>
        /// Gets or Sets GeoCode
        /// </summary>
        [DataMember(Name="geoCode")]
        public string GeoCode { get; set; }

        /// <summary>
        /// Gets or Sets GeoTitle
        /// </summary>
        [DataMember(Name="geoTitle")]
        public string GeoTitle { get; set; }

        /// <summary>
        /// Gets or Sets FipCode
        /// </summary>
        [DataMember(Name="fipCode")]
        public string FipCode { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description")]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source")]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets Databank
        /// </summary>
        [DataMember(Name="databank")]
        public string Databank { get; set; }

        /// <summary>
        /// Gets or Sets FreqCode
        /// </summary>
        [DataMember(Name="freqCode")]
        public string FreqCode { get; set; }

        /// <summary>
        /// Gets or Sets ObservedAttribute
        /// </summary>
        [DataMember(Name="observedAttribute")]
        public string ObservedAttribute { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="startDate")]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="endDate")]
        public string EndDate { get; set; }

        /// <summary>
        /// Gets or Sets LastHistory
        /// </summary>
        [DataMember(Name="lastHistory")]
        public string LastHistory { get; set; }

        /// <summary>
        /// Gets or Sets DateCreated
        /// </summary>
        [DataMember(Name="dateCreated")]
        public string DateCreated { get; set; }

        /// <summary>
        /// Gets or Sets DateUpdated
        /// </summary>
        [DataMember(Name="dateUpdated")]
        public string DateUpdated { get; set; }

        /// <summary>
        /// Gets or Sets DateExecuted
        /// </summary>
        [DataMember(Name="dateExecuted")]
        public string DateExecuted { get; set; }

        /// <summary>
        /// Gets or Sets Error
        /// </summary>
        [DataMember(Name="error")]
        public string Error { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status")]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DataSeriesResult {\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  Mnemonic: ").Append(Mnemonic).Append("\n");
            sb.Append("  Concept: ").Append(Concept).Append("\n");
            sb.Append("  GeoCode: ").Append(GeoCode).Append("\n");
            sb.Append("  GeoTitle: ").Append(GeoTitle).Append("\n");
            sb.Append("  FipCode: ").Append(FipCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Databank: ").Append(Databank).Append("\n");
            sb.Append("  FreqCode: ").Append(FreqCode).Append("\n");
            sb.Append("  ObservedAttribute: ").Append(ObservedAttribute).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  LastHistory: ").Append(LastHistory).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  DateExecuted: ").Append(DateExecuted).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DataSeriesResult)obj);
        }

        /// <summary>
        /// Returns true if DataSeriesResult instances are equal
        /// </summary>
        /// <param name="other">Instance of DataSeriesResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DataSeriesResult other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Data == other.Data ||
                    Data != null &&
                    Data.Equals(other.Data)
                ) && 
                (
                    Mnemonic == other.Mnemonic ||
                    Mnemonic != null &&
                    Mnemonic.Equals(other.Mnemonic)
                ) && 
                (
                    Concept == other.Concept ||
                    Concept != null &&
                    Concept.Equals(other.Concept)
                ) && 
                (
                    GeoCode == other.GeoCode ||
                    GeoCode != null &&
                    GeoCode.Equals(other.GeoCode)
                ) && 
                (
                    GeoTitle == other.GeoTitle ||
                    GeoTitle != null &&
                    GeoTitle.Equals(other.GeoTitle)
                ) && 
                (
                    FipCode == other.FipCode ||
                    FipCode != null &&
                    FipCode.Equals(other.FipCode)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    Databank == other.Databank ||
                    Databank != null &&
                    Databank.Equals(other.Databank)
                ) && 
                (
                    FreqCode == other.FreqCode ||
                    FreqCode != null &&
                    FreqCode.Equals(other.FreqCode)
                ) && 
                (
                    ObservedAttribute == other.ObservedAttribute ||
                    ObservedAttribute != null &&
                    ObservedAttribute.Equals(other.ObservedAttribute)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    LastHistory == other.LastHistory ||
                    LastHistory != null &&
                    LastHistory.Equals(other.LastHistory)
                ) && 
                (
                    DateCreated == other.DateCreated ||
                    DateCreated != null &&
                    DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    DateUpdated == other.DateUpdated ||
                    DateUpdated != null &&
                    DateUpdated.Equals(other.DateUpdated)
                ) && 
                (
                    DateExecuted == other.DateExecuted ||
                    DateExecuted != null &&
                    DateExecuted.Equals(other.DateExecuted)
                ) && 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Data != null)
                    hashCode = hashCode * 59 + Data.GetHashCode();
                    if (Mnemonic != null)
                    hashCode = hashCode * 59 + Mnemonic.GetHashCode();
                    if (Concept != null)
                    hashCode = hashCode * 59 + Concept.GetHashCode();
                    if (GeoCode != null)
                    hashCode = hashCode * 59 + GeoCode.GetHashCode();
                    if (GeoTitle != null)
                    hashCode = hashCode * 59 + GeoTitle.GetHashCode();
                    if (FipCode != null)
                    hashCode = hashCode * 59 + FipCode.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (Databank != null)
                    hashCode = hashCode * 59 + Databank.GetHashCode();
                    if (FreqCode != null)
                    hashCode = hashCode * 59 + FreqCode.GetHashCode();
                    if (ObservedAttribute != null)
                    hashCode = hashCode * 59 + ObservedAttribute.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (LastHistory != null)
                    hashCode = hashCode * 59 + LastHistory.GetHashCode();
                    if (DateCreated != null)
                    hashCode = hashCode * 59 + DateCreated.GetHashCode();
                    if (DateUpdated != null)
                    hashCode = hashCode * 59 + DateUpdated.GetHashCode();
                    if (DateExecuted != null)
                    hashCode = hashCode * 59 + DateExecuted.GetHashCode();
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DataSeriesResult left, DataSeriesResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DataSeriesResult left, DataSeriesResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
